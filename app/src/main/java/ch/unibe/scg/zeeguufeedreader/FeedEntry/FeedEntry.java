package ch.unibe.scg.zeeguufeedreader.FeedEntry;

import android.graphics.Bitmap;
import android.text.Html;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import ch.unibe.scg.zeeguufeedreader.Core.ContextManager;
import ch.unibe.scg.zeeguufeedreader.FeedOverview.Feed;
import ch.unibe.scg.zeeguufeedreader.R;

@DatabaseTable(tableName = "feed_entries")
public class FeedEntry implements Comparable<FeedEntry> {

    // Id is generated by the database and set on the object
    @DatabaseField(generatedId = true)
    private int id;

    @DatabaseField(foreign = true, foreignAutoRefresh = true, columnName = "feed_id", columnDefinition = "integer references feeds(id) on delete cascade")
    private Feed feed;

    @DatabaseField(columnName = "feedly_id")
    private String feedlyId;

    @DatabaseField(columnName = "title")
    private String title;

    @DatabaseField(columnName = "content")
    private String content;

    @DatabaseField(columnName = "summary")
    private String summary;

    @DatabaseField(columnName = "url")
    private String url;

    @DatabaseField(columnName = "author")
    private String author;

    @DatabaseField(columnName = "date")
    private Date date;

    @DatabaseField(columnName = "read")
    private boolean read;

    @DatabaseField(columnName = "favorite")
    private boolean favorite;

    public FeedEntry() {
        // Empty constructor needed by ormlite
    }

    // TODO: Change constructor?
    public FeedEntry(String title, String content, String url, String author, long timestamp) {
        this.title = title;
        this.content = content;
        this.url = url;
        this.author = author;
        this.date = new Date(timestamp);
    }

    public View getView(LayoutInflater inflater, View convertView, ViewGroup parent) {
        FeedEntryViewHolder holder;
        String newline = System.getProperty("line.separator");

        if (convertView == null) {
            convertView = inflater.inflate(R.layout.feed_entry, parent, false);
            holder = new FeedEntryViewHolder();

            holder.favicon = (ImageView) convertView.findViewById(R.id.feed_entry_favicon);
            holder.published = (TextView) convertView.findViewById(R.id.feed_entry_published);
            holder.title = (TextView) convertView.findViewById(R.id.feed_entry_title);
            holder.summary = (TextView) convertView.findViewById(R.id.feed_entry_summary);
            holder.favorite = (ImageView) convertView.findViewById(R.id.feed_entry_favorite);

            convertView.setTag(holder);
        }
        else {
            holder = (FeedEntryViewHolder) convertView.getTag();
        }

        // Read/Unread
        if (read) {
            holder.published.setTextColor(ContextManager.getContext().getResources().getColor(R.color.silver));
            holder.title.setTextColor(ContextManager.getContext().getResources().getColor(R.color.gray));
            holder.summary.setTextColor(ContextManager.getContext().getResources().getColor(R.color.silver));
        }
        else {
            holder.published.setTextColor(ContextManager.getContext().getResources().getColor(R.color.gray));
            holder.title.setTextColor(ContextManager.getContext().getResources().getColor(R.color.darkgray));
            holder.summary.setTextColor(ContextManager.getContext().getResources().getColor(R.color.gray));
        }

        // Favicon
        Bitmap favicon = feed.getFavicon();
        if (favicon != null) {
            holder.favicon.setVisibility(View.VISIBLE);
            holder.favicon.setImageBitmap(favicon);
        }
        else
            holder.favicon.setVisibility(View.INVISIBLE);

        // Date
        holder.published.setText(getDateTime());

        // Title
        holder.title.setText(title);

        // Summary
        if (content != null && !content.equals("")) {
            // TODO: Create summary during parsing?
            String summary = Html.fromHtml(content).toString();
            summary = summary.replaceAll("ï¿¼", ""); // Removes objects like images
            summary = summary.replaceAll(newline, " ");
            summary = summary.trim();

            holder.summary.setText(summary);
        }

        // Favorite
        if (favorite) {
            holder.favorite.setVisibility(View.VISIBLE);
            holder.favorite.setImageDrawable(ContextManager.getContext().getResources().getDrawable(R.drawable.ic_star));
        }
        else {
            holder.favorite.setVisibility(View.GONE);
            holder.favorite.setImageDrawable(null);
        }

        return convertView;
    }

    @Override
    public int compareTo(FeedEntry entry) {
        // TODO: Add option for oldest first (this.date.compareTo(entry.date))
        // Newest first
        return entry.date.compareTo(this.date);
    }

    public String getTitle() {
        return title;
    }

    public long getId() {
        return id;
    }

    public String getFeedlyId() {
        return feedlyId;
    }

    public void setFeedlyId(String feedlyId) {
        this.feedlyId = feedlyId;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getSummary() {
        return summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getDateFull() {
        DateFormat dateFull = new SimpleDateFormat("EEEE, dd.MM.yyyy");
        return dateFull.format(date);
    }

    public String getDateTime() {
        DateFormat time = new SimpleDateFormat("HH:mm");
        return time.format(date);
    }

    public void setDate(long timestamp) {
        this.date = new Date(timestamp);
    }

    public Feed getFeed() {
        return feed;
    }

    public void setFeed(Feed feed) {
        this.feed = feed;
    }

    public boolean isRead() {
        return read;
    }

    public void setRead(boolean read) {
        this.read = read;
    }

    public boolean isFavorite() {
        return favorite;
    }

    public void setFavorite(boolean favorite) {
        this.favorite = favorite;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FeedEntry entry = (FeedEntry) o;

        if (id != entry.id) return false;
        if (read != entry.read) return false;
        if (title != null ? !title.equals(entry.title) : entry.title != null) return false;
        if (content != null ? !content.equals(entry.content) : entry.content != null) return false;
        if (summary != null ? !summary.equals(entry.content) : entry.summary != null) return false;
        if (url != null ? !url.equals(entry.url) : entry.url != null) return false;
        if (author != null ? !author.equals(entry.author) : entry.author != null) return false;
        return !(date != null ? !date.equals(entry.date) : entry.date != null);
    }

    @Override
    public int hashCode() {
        int result = title != null ? title.hashCode() : 0;
        result = 31 * result + (int) (id ^ (id >>> 32));
        result = 31 * result + (content != null ? content.hashCode() : 0);
        result = 31 * result + (summary != null ? summary.hashCode() : 0);
        result = 31 * result + (url != null ? url.hashCode() : 0);
        result = 31 * result + (author != null ? author.hashCode() : 0);
        result = 31 * result + (date != null ? date.hashCode() : 0);
        result = 31 * result + (read ? 1 : 0);
        return result;
    }

    // View Holder, see: https://developer.android.com/training/improving-layouts/smooth-scrolling.html#ViewHolder
    static class FeedEntryViewHolder {
        ImageView favicon;
        TextView published;
        TextView title;
        TextView summary;
        ImageView favorite;
    }
}
